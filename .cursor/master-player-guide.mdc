---
description: Strategic commands and prompts for efficient codebase navigation and task execution
globs: 
alwaysApply: true
---

# Master Player Guide - Fast Track Commands

This document contains the most efficient commands and strategies for common tasks in the project. Use these to quickly navigate complex situations and perform tasks with minimal effort.

## Todo Management

### Adding Todo Items
```bash
# Add a quick todo to the project-wide list
echo "- [ ] Task description @category" >> todos.md

# Add a code-specific todo with priority
echo "// TODO(high): Implement feature X by [date]" >> src/feature.js
```

### Listing and Filtering Todos
```bash
# Find all TODOs in the codebase
grep -r "TODO" --include="*.{js,ts,jsx,tsx}" ./src

# List todos by priority
grep -r "TODO(high)" --include="*.{js,ts,jsx,tsx}" ./src

# List todos by assignee
grep -r "TODO(@username)" --include="*.{js,ts,jsx,tsx}" ./src
```

## Development Mode Management

### Switching Development Modes
```bash
# Switch to development mode
npm run dev

# Switch to production mode with mocks
NODE_ENV=production MOCK_SERVICES=true npm run start

# Switch to testing mode with specific configs
NODE_ENV=test CONFIG_OVERRIDE=./test-config.json npm run test
```

### Getting Mode Context
```bash
# Display current development environment variables
node -e "console.log('Current env:', process.env.NODE_ENV, '\nFeature flags:', process.env.FEATURE_FLAGS)"

# Create a status report of current mode
echo "===== Dev Status =====" > status.log
echo "Mode: $(node -e "console.log(process.env.NODE_ENV || 'development')")" >> status.log
echo "Time: $(date)" >> status.log
echo "Last commit: $(git log -1 --oneline)" >> status.log
```

## Documentation Management

### Adding Documentation Tasks
```bash
# Flag file needing documentation
echo "// DOCS_NEEDED: Explain the purpose and usage of this module" >> src/module.js

# Create documentation stub
cat > docs/module.md << EOL
# Module Documentation

## Purpose

## API Reference

## Examples

## Known Issues
EOL
```

## Project Navigation

### Finding Files

Find files using fuzzy search:

```bash
find . -type f -name "*<partial-name>*" | grep -v "node_modules" | grep -v ".git"
```

### Searching File Contents

Search in files recursively:

```bash
grep -r "<search-term>" --include="*.{js,ts,md,mdc}" . --color
```

## Note Management

### Creating Notes
```bash
# Create a dated development note
cat > notes/$(date +%Y-%m-%d)_dev_note.md << EOL
# Development Note - $(date +%Y-%m-%d)

## Context
[Current task/issue being worked on]

## Observations
- 

## Decisions
- 

## Next Steps
- 
EOL
```

### Listing Notes
```bash
# List all notes chronologically
ls -lt notes/ | grep "_dev_note.md"

# Search notes for a specific topic
grep -r "Decision" notes/ --include="*_dev_note.md"
```

## Emergency Codebase Analysis
```bash
# Quick overview of the project structure
find . -type f -not -path "*/node_modules/*" -not -path "*/.git/*" | sort | uniq -c

# Identify largest files (potential complexity hotspots)
find . -type f -not -path "*/node_modules/*" -not -path "*/.git/*" -exec ls -la {} \; | sort -nr -k 5 | head -n 20

# Find files changed in the last 24 hours
find . -type f -mtime -1 -not -path "*/node_modules/*" -not -path "*/.git/*"
```

## Command Error Prevention

### Common Mistakes to Avoid
1. Running destructive commands without backup
2. Using relative paths in scripts that run from different directories
3. Hardcoding environment-specific values
4. Forgetting to handle command errors
5. Not using version control before major changes

### Key Rules

1. **Idempotency First**: Design all commands and scripts to be safely runnable multiple times without causing unintended side effects.
2. **Defensive Operations**: Always make backups before destructive operations and use the `--dry-run` flag when available.
3. **Standardized Error Handling**: Every script should check for errors and provide meaningful feedback (exit codes and error messages).
4. **Consistent Logging**: Use structured logging with timestamp, severity level, and context for all automated processes.
5. **Environment Awareness**: Scripts should detect their environment and adapt or fail gracefully if in the wrong environment.
6. **Version Control Integration**: Ensure all significant changes are committed or stashed before running potentially risky commands.

### Alternative Command Execution Methods

1. **Use Node scripts instead of Bash scripts**:
   ```bash
   # Instead of complex bash command
   node -e "console.log(require('fs').readdirSync('.').filter(f => f.endsWith('.md')))"
   ```

2. **Use PowerShell when available**:
   ```powershell
   # Launch PowerShell from Git Bash
   powershell -Command "Get-ChildItem -Filter *.md | Select-Object Name"
   ```

3. **Create single-line script files**:
   ```bash
   # Create a temporary script file
   echo 'find . -name "*.md" | grep -v node_modules' > temp_script.sh
   # Run it
   bash temp_script.sh
   # Clean up
   rm temp_script.sh
   ```

### Cross-Platform Command Equivalents

| Task | Unix/Bash | Windows/PowerShell | Node.js (Platform Independent) |
|------|-----------|-------------------|--------------------------------|
| List files | `ls -la` | `Get-ChildItem` | `node -e "console.log(require('fs').readdirSync('.'))"` |
| Find text | `grep -r "text" .` | `Get-ChildItem -Recurse | Select-String "text"` | `node -e "require('child_process').execSync('grep -r \"text\" .')"` |
| Create directory | `mkdir -p dir/subdir` | `New-Item -Path dir/subdir -ItemType Directory -Force` | `node -e "require('fs').mkdirSync('dir/subdir', {recursive: true})"` |
| Copy file | `cp file1 file2` | `Copy-Item file1 file2` | `node -e "require('fs').copyFileSync('file1', 'file2')"` |
| Append to file | `echo "text" >> file` | `Add-Content -Path file -Value "text"` | `node -e "require('fs').appendFileSync('file', 'text')"` |

## Creative Unconventional Approaches

When traditional methods fail, try these unorthodox techniques:

### Extreme Debugging

1. **Visual Execution Flow**:
   Create a visual map of command execution:
   ```javascript
   // Add this to your shell script to visualize flow
   function trace() {
     echo "⚙️ $1" | tee -a execution_flow.log
     echo "   └─ $(date +%H:%M:%S.%N | cut -b1-15)" | tee -a execution_flow.log
   }
   
   # Then use in scripts
   trace "Beginning task execution"
   # command here
   trace "Task complete"
   ```

2. **Neural Command Predictor**:
   Train a simple model to predict successful commands:
   ```javascript
   // Log successful and failed commands
   function logCommand(cmd, success) {
     fs.appendFileSync('command_history.jsonl', 
       JSON.stringify({command: cmd, success, timestamp: Date.now()}) + '\n'
     );
   }
   
   // Analyze past commands for patterns
   function suggestCommand(partialCommand) {
     const history = fs.readFileSync('command_history.jsonl', 'utf8')
       .split('\n')
       .filter(Boolean)
       .map(JSON.parse);
     
     // Find similar successful commands
     const matches = history
       .filter(entry => entry.success && entry.command.includes(partialCommand))
       .sort((a, b) => b.timestamp - a.timestamp);
     
     return matches.length > 0 ? matches[0].command : null;
   }
   ```

### Quantum Approach to Documentation

1. **Schrödinger's Documentation**:
   Update both code and docs simultaneously, neither is primary:
   ```javascript
   // Generate both implementation and docs in one operation
   function generateBoth(spec) {
     const implementation = generateCodeFromSpec(spec);
     const documentation = generateDocsFromSpec(spec);
     
     fs.writeFileSync('implementation.js', implementation);
     fs.writeFileSync('documentation.md', documentation);
     
     // Create bidirectional links
     insertDocsLink('implementation.js', 'documentation.md');
     insertCodeLink('documentation.md', 'implementation.js');
   }
   ```

2. **Documentation-Driven Debugging**:
   Debug by writing documentation about what should happen:
   ```javascript
   // Create a debugging document
   function documentDebug(problem) {
     const debugDoc = `
     # Debug Investigation: ${problem}
     
     ## Expected Behavior
     [Describe what should happen]
     
     ## Actual Behavior
     [Describe what actually happens]
     
     ## Investigation Steps
     1. [First step]
     2. [Second step]
     
     ## Findings
     [Document discoveries here]
     `;
     
     fs.writeFileSync(`debug-${Date.now()}.md`, debugDoc);
     // The act of writing this often reveals the solution!
   }
   ```

## Logging and Monitoring

### Standardized Logging Patterns
```javascript
// Consistent logging format
function log(level, message, data = {}) {
  const entry = {
    timestamp: new Date().toISOString(),
    level,
    message,
    ...data
  };
  
  console.log(JSON.stringify(entry));
  // Also write to file for persistence
  fs.appendFileSync('dev.log', JSON.stringify(entry) + '\n');
}

// Usage
log('INFO', 'Starting process', { process: 'build', target: 'production' });
log('ERROR', 'Process failed', { error: err.message, stackTrace: err.stack });
```

### Self-Monitoring Tools
```bash
# Create a dashboard of current development status
cat > dashboard.sh << EOL
#!/bin/bash
clear
echo "==== DEV DASHBOARD ===="
echo "Last 5 commits:"
git log -5 --oneline
echo
echo "Active branches:"
git branch
echo
echo "Recent errors (last 10):"
grep -r "ERROR" ./logs --include="*.log" | tail -10
echo
echo "TODO count: \$(grep -r "TODO" --include="*.{js,ts,jsx,tsx}" ./src | wc -l)"
EOL
chmod +x dashboard.sh
```

Remember: When conventional approaches fail, creative solutions often succeed. The best command is often the one that works in your specific environment, regardless of how unorthodox it might seem.